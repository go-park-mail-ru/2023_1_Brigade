version: '3.8'

services:
  api:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/api/main.go
    container_name: api
    image: technogramm/api:$VERSION
    depends_on:
      - postgres
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "8081:8081"
      - "8079:8079"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  chat:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/chat/main.go
    container_name: chat
    image: technogramm/chat:$VERSION
    depends_on:
      - postgres
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "9000:9000"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  user:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/user/main.go
    container_name: user
    image: technogramm/user:$VERSION
    depends_on:
      - postgres
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "9001:9001"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  messages:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/messages/main.go
    container_name: messages
    image: technogramm/messages:$VERSION
    depends_on:
      - postgres
      - consumer
      - producer
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "9002:9002"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9002/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  consumer:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/consumer/rabbitMQ/main.go
    container_name: consumer
    image: technogramm/consumer:$VERSION
    depends_on:
      - rabbitmq
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "9003:9003"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9003/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  producer:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/producer/rabbitMQ/main.go
    container_name: producer
    image: technogramm/producer:$VERSION
    depends_on:
      - rabbitmq
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "9004:9004"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9004/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  auth:
    build:
      args:
        VERSION: $VERSION
        SRC_PATH: cmd/auth/main.go
    container_name: auth
    image: technogramm/auth:$VERSION
    depends_on:
      - postgres
    volumes:
      - /home/ubuntu/avatars:/avatars
    ports:
      - "9005:9005"
    restart: always
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9005/health" ]
      interval: 1s
      timeout: 2s
      retries: 2

  rabbitmq:
    image: rabbitmq:latest
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    env_file:
      - .env
    ports:
      - "5672:5672"
    networks:
      - backend-network

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./db/001_init_up.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend-network

  centrifugo:
    image: centrifugo/centrifugo:latest
    container_name: centrifugo
    command: centrifugo -c config.json --port=8900 --admin
    ports:
      - "8900:8900"
    volumes:
      - ./config.json:/centrifugo/config.json
    restart: always
    networks:
      - backend-network

  prometheus:
    hostname: prometheus
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
    restart: always
    networks:
      - backend-network
    depends_on:
      - prometheus
    user: "472"

  node-exporter:
    hostname: node-exporter
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - "9100"
    networks:
      - backend-network

networks:
  backend-network:
    name: "backend-network"
    driver: bridge
  sentry:
    driver: bridge

volumes:
  postgres_data: {}
  redis_data: {}
