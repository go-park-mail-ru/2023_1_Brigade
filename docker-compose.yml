version: "3.9"

services:
  backend:
    build: .
#    depends_on:
#      - db
    ports:
      - "8081:8081"
    networks:
      - db-network

#  minio:
#    image: minio/minio:RELEASE.2023-03-22T06-36-24Z
#    volumes:
#      - /data/minio:/data
#    environment:
#      MINIO_ROOT_USER: minio
#      MINIO_ROOT_PASSWORD: minio123
#    ports:
#      - "9000:9000"
#    command: server /data
#
#  db:
#    image: postgres
#    container_name: db
#    environment:
#      POSTGRES_DB: "brigade"
#      POSTGRES_USER: "brigade"
#      POSTGRES_PASSWORD: "123"
#    networks:
#      - db-network
#    ports:
#      - "54321:5432"
#    volumes:
#      - ./db/001_init_up.sql:/docker-entrypoint-initdb.d/init.sql

  minio:
    hostname: minio
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2023-03-22T06-36-24Z
    command: server --console-address ":9099" /data
    volumes:
      - ~/minio/data:/data
    restart: always
    ports:
      - "9000:9000"
      - "9099:9099"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - minio-network
#  minio:
#    image: quay.io/minio/minio:RELEASE.2023-03-22T06-36-24Z
#    command: server /data
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    environment:
#      MINIO_ROOT_USER: minio
#      MINIO_ROOT_PASSWORD: minio123
#    volumes:
#      - minio-data:/data
#    networks:
#      - minio-net

#  minio-console:
#    image: minio/mc
#    command: "admin config host add minio http://minio:9000 myaccesskey mysecretkey && mc web minio"
#    ports:
#      - "8082:8082"
#    depends_on:
#      - minio
#    networks:
#      - minio-net

networks:
  db-network:
    name: "db-network"
    driver: bridge

  minio-network:
    name: "minio-network"
    driver: bridge
    external: false

  minio-net:

volumes:
  minio-data:


#  zookeeper:
#    image: zookeeper
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#
#  kafka:
#    image: wurstmeister/kafka
#    container_name: kafka
#    ports:
#      - "9092:9092"
#    environment:
##      KAFKA_ADVERTISED_HOST_NAME: localhost
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092
##      KAFKA_CREATE_TOPICS: "messages:1:1"
#    depends_on:
#      - zookeeper

#  rdb:
#    image: redis
#    ports:
#      - "63791:6379"
#    volumes:
#      - redis-data:/data

#volumes:
#  redis-data:
#    driver: local


