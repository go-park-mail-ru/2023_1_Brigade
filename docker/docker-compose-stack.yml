version: '3.9'

services:
  rabbitmq:
    image: rabbitmq:latest
    hostname: rabbitmq
    container_name: rabbitmq
    restart: always
    env_file:
      - ../.env
    ports:
      - "5672:5672"
    networks:
      - backend-network

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - ../.env
    ports:
      - "5432:5432"
    volumes:
      - ./../db/001_init_up.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend-network

  centrifugo:
    image: centrifugo/centrifugo:latest
    container_name: centrifugo
    command: centrifugo -c config.json --port=8900 --admin
    ports:
      - "8900:8900"
    volumes:
      - ./../config.json:/centrifugo/config.json
    restart: always
    networks:
      - backend-network

  prometheus:
    hostname: prometheus
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./../monitoring/prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - ../.env
    ports:
      - "3000:3000"
    volumes:
      - ./../monitoring/grafana/data:/var/lib/grafana
      - ./../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./../monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
    restart: always
    networks:
      - backend-network
    depends_on:
      - prometheus
    user: "472"

  node-exporter:
    hostname: node-exporter
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - "9100"
    networks:
      - backend-network

#  sentry-redis:
#    image: redis:latest
#    container_name: sentry-redis
#    hostname: sentry-redis
#    restart: always
#    networks:
#      - sentry
#    volumes:
#      - './var/sentry/redis/data:/data'
#
#  sentry-postgres:
#    image: postgres:latest
#    container_name: sentry-postgres
#    hostname: sentry-postgres
#    restart: always
#    env_file:
#      - ../.env
#    networks:
#      - sentry
#    volumes:
#      - './var/sentry/postgres:/var/lib/postgresql/data'
#
#  sentry-base:
#    image: sentry:latest
#    container_name: sentry-base
#    hostname: sentry-base
#    restart: always
#    ports:
#      - '9321:9000'
#    env_file:
#      - ../.env
#    depends_on:
#      - sentry-redis
#      - sentry-postgres
#    networks:
#      - sentry
#    volumes:
#      - './var/sentry/sentry:/var/lib/sentry/files'
#
#  sentry-cron:
#    image: sentry:latest
#    container_name: sentry-cron
#    hostname: sentry-cron
#    restart: always
#    env_file:
#      - ../.env
#    depends_on:
#      - sentry-redis
#      - sentry-postgres
#    command: "sentry run cron"
#    networks:
#      - sentry
#    volumes:
#      - './var/sentry/sentry:/var/lib/sentry/files'
#
#  sentry-worker:
#    image: sentry:latest
#    container_name: sentry-worker
#    hostname: sentry-worker
#    restart: always
#    env_file:
#      - ../.env
#    depends_on:
#      - sentry-redis
#      - sentry-postgres
#    command: "sentry run worker"
#    networks:
#      - sentry
#    volumes:
#      - './var/sentry/sentry:/var/lib/sentry/files'

networks:
  backend-network:
    name: "backend-network"
    driver: bridge
  sentry:
    driver: bridge

volumes:
  postgres_data: {}
  redis_data: {}
