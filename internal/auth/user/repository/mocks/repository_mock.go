// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	model "project/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckCorrectPassword mocks base method.
func (m *MockRepository) CheckCorrectPassword(ctx context.Context, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCorrectPassword", ctx, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCorrectPassword indicates an expected call of CheckCorrectPassword.
func (mr *MockRepositoryMockRecorder) CheckCorrectPassword(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCorrectPassword", reflect.TypeOf((*MockRepository)(nil).CheckCorrectPassword), ctx, email, password)
}

// CheckExistEmail mocks base method.
func (m *MockRepository) CheckExistEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistEmail indicates an expected call of CheckExistEmail.
func (mr *MockRepositoryMockRecorder) CheckExistEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistEmail", reflect.TypeOf((*MockRepository)(nil).CheckExistEmail), ctx, email)
}

// CheckExistUsername mocks base method.
func (m *MockRepository) CheckExistUsername(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistUsername", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExistUsername indicates an expected call of CheckExistUsername.
func (mr *MockRepositoryMockRecorder) CheckExistUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistUsername", reflect.TypeOf((*MockRepository)(nil).CheckExistUsername), ctx, username)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user model.AuthorizedUser) (model.AuthorizedUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(model.AuthorizedUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}
