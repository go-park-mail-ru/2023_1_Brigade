// Code generated by MockGen. DO NOT EDIT.
// Source: authservice.go

// Package mockAuthService is a generated GoMock package.
package mocks

import (
	"github.com/labstack/echo/v4"
	"project/internal/model"
	reflect "reflect"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockAuthService creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetChatById mocks base method.
func (m *MockRepository) GetChatById(ctx echo.Context, chatID uint64) (model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatById", ctx, chatID)
	ret0, _ := ret[0].(model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatById indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) GetChatById(ctx echo.Context, chatID uint64) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatById", reflect.TypeOf((*MockRepository)(nil).GetChatById), ctx, chatID)
}

// CreateChat mocks base method.
func (m *MockRepository) CreateChat(ctx echo.Context, chat model.Chat) (model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) CreateChat(ctx echo.Context, chat model.Chat) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockRepository)(nil).CreateChat), ctx, chat)
}

// DeleteChatById mocks base method.
func (m *MockRepository) DeleteChatById(ctx echo.Context, chatID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatById", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatById indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) DeleteChatById(ctx echo.Context, chatID uint64) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatById", reflect.TypeOf((*MockRepository)(nil).DeleteChatById), ctx, chatID)
}
