// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_images is a generated GoMock package.
package mock_images

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepostiory is a mock of Repostiory interface.
type MockRepostiory struct {
	ctrl     *gomock.Controller
	recorder *MockRepostioryMockRecorder
}

// MockRepostioryMockRecorder is the mock recorder for MockRepostiory.
type MockRepostioryMockRecorder struct {
	mock *MockRepostiory
}

// NewMockRepostiory creates a new mock instance.
func NewMockRepostiory(ctrl *gomock.Controller) *MockRepostiory {
	mock := &MockRepostiory{ctrl: ctrl}
	mock.recorder = &MockRepostioryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepostiory) EXPECT() *MockRepostioryMockRecorder {
	return m.recorder
}

// LoadImage mocks base method.
func (m *MockRepostiory) LoadImage(ctx context.Context, file multipart.File, filename string, userID uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImage", ctx, file, filename, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadImage indicates an expected call of LoadImage.
func (mr *MockRepostioryMockRecorder) LoadImage(ctx, file, filename, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImage", reflect.TypeOf((*MockRepostiory)(nil).LoadImage), ctx, file, filename, userID)
}
