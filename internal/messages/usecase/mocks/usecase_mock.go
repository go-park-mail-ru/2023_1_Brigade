// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	model "project/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// PullFromConsumer mocks base method.
func (m *MockUsecase) PullFromConsumer(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullFromConsumer", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullFromConsumer indicates an expected call of PullFromConsumer.
func (mr *MockUsecaseMockRecorder) PullFromConsumer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullFromConsumer", reflect.TypeOf((*MockUsecase)(nil).PullFromConsumer), ctx)
}

// PutInProducer mocks base method.
func (m *MockUsecase) PutInProducer(ctx context.Context, producerMessage model.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInProducer", ctx, producerMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInProducer indicates an expected call of PutInProducer.
func (mr *MockUsecaseMockRecorder) PutInProducer(ctx, producerMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInProducer", reflect.TypeOf((*MockUsecase)(nil).PutInProducer), ctx, producerMessage)
}

// SwitchMessageType mocks base method.
func (m *MockUsecase) SwitchMessageType(ctx context.Context, jsonWebSocketMessage []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchMessageType", ctx, jsonWebSocketMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchMessageType indicates an expected call of SwitchMessageType.
func (mr *MockUsecaseMockRecorder) SwitchMessageType(ctx, jsonWebSocketMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchMessageType", reflect.TypeOf((*MockUsecase)(nil).SwitchMessageType), ctx, jsonWebSocketMessage)
}
