// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_chat is a generated GoMock package.
package mock_chat

import (
	context "context"
	model "project/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddUserInChatDB mocks base method.
func (m *MockRepository) AddUserInChatDB(ctx context.Context, chatID, memberID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserInChatDB", ctx, chatID, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserInChatDB indicates an expected call of AddUserInChatDB.
func (mr *MockRepositoryMockRecorder) AddUserInChatDB(ctx, chatID, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInChatDB", reflect.TypeOf((*MockRepository)(nil).AddUserInChatDB), ctx, chatID, memberID)
}

// CreateChat mocks base method.
func (m *MockRepository) CreateChat(ctx context.Context, chat model.Chat) (model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, chat)
	ret0, _ := ret[0].(model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockRepositoryMockRecorder) CreateChat(ctx, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockRepository)(nil).CreateChat), ctx, chat)
}

// DeleteChatById mocks base method.
func (m *MockRepository) DeleteChatById(ctx context.Context, chatID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatById", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatById indicates an expected call of DeleteChatById.
func (mr *MockRepositoryMockRecorder) DeleteChatById(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatById", reflect.TypeOf((*MockRepository)(nil).DeleteChatById), ctx, chatID)
}

// DeleteChatMembers mocks base method.
func (m *MockRepository) DeleteChatMembers(ctx context.Context, chatID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatMembers", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatMembers indicates an expected call of DeleteChatMembers.
func (mr *MockRepositoryMockRecorder) DeleteChatMembers(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatMembers", reflect.TypeOf((*MockRepository)(nil).DeleteChatMembers), ctx, chatID)
}

// GetChatById mocks base method.
func (m *MockRepository) GetChatById(ctx context.Context, chatID uint64) (model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatById", ctx, chatID)
	ret0, _ := ret[0].(model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatById indicates an expected call of GetChatById.
func (mr *MockRepositoryMockRecorder) GetChatById(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatById", reflect.TypeOf((*MockRepository)(nil).GetChatById), ctx, chatID)
}

// GetChatMembersByChatId mocks base method.
func (m *MockRepository) GetChatMembersByChatId(ctx context.Context, chatID uint64) ([]model.ChatMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMembersByChatId", ctx, chatID)
	ret0, _ := ret[0].([]model.ChatMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMembersByChatId indicates an expected call of GetChatMembersByChatId.
func (mr *MockRepositoryMockRecorder) GetChatMembersByChatId(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMembersByChatId", reflect.TypeOf((*MockRepository)(nil).GetChatMembersByChatId), ctx, chatID)
}

// GetChatsByUserId mocks base method.
func (m *MockRepository) GetChatsByUserId(ctx context.Context, userID uint64) ([]model.ChatMembers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatsByUserId", ctx, userID)
	ret0, _ := ret[0].([]model.ChatMembers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatsByUserId indicates an expected call of GetChatsByUserId.
func (mr *MockRepositoryMockRecorder) GetChatsByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatsByUserId", reflect.TypeOf((*MockRepository)(nil).GetChatsByUserId), ctx, userID)
}

// GetSearchChannels mocks base method.
func (m *MockRepository) GetSearchChannels(ctx context.Context, string string, userID uint64) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchChannels", ctx, string, userID)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchChannels indicates an expected call of GetSearchChannels.
func (mr *MockRepositoryMockRecorder) GetSearchChannels(ctx, string, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchChannels", reflect.TypeOf((*MockRepository)(nil).GetSearchChannels), ctx, string, userID)
}

// GetSearchChats mocks base method.
func (m *MockRepository) GetSearchChats(ctx context.Context, userID uint64, string string) ([]model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchChats", ctx, userID, string)
	ret0, _ := ret[0].([]model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchChats indicates an expected call of GetSearchChats.
func (mr *MockRepositoryMockRecorder) GetSearchChats(ctx, userID, string interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchChats", reflect.TypeOf((*MockRepository)(nil).GetSearchChats), ctx, userID, string)
}

// UpdateChatAvatar mocks base method.
func (m *MockRepository) UpdateChatAvatar(ctx context.Context, url string, chatID uint64) (model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatAvatar", ctx, url, chatID)
	ret0, _ := ret[0].(model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChatAvatar indicates an expected call of UpdateChatAvatar.
func (mr *MockRepositoryMockRecorder) UpdateChatAvatar(ctx, url, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatAvatar", reflect.TypeOf((*MockRepository)(nil).UpdateChatAvatar), ctx, url, chatID)
}

// UpdateChatById mocks base method.
func (m *MockRepository) UpdateChatById(ctx context.Context, title string, chatID uint64) (model.DBChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatById", ctx, title, chatID)
	ret0, _ := ret[0].(model.DBChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChatById indicates an expected call of UpdateChatById.
func (mr *MockRepositoryMockRecorder) UpdateChatById(ctx, title, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatById", reflect.TypeOf((*MockRepository)(nil).UpdateChatById), ctx, title, chatID)
}
