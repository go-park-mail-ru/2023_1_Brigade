// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_consumer is a generated GoMock package.
package mock_consumer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// ConsumeMessage mocks base method.
func (m *MockUsecase) ConsumeMessage(ctx context.Context) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeMessage", ctx)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ConsumeMessage indicates an expected call of ConsumeMessage.
func (mr *MockUsecaseMockRecorder) ConsumeMessage(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeMessage", reflect.TypeOf((*MockUsecase)(nil).ConsumeMessage), ctx)
}

// StartConsumeMessages mocks base method.
func (m *MockUsecase) StartConsumeMessages(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartConsumeMessages", ctx)
}

// StartConsumeMessages indicates an expected call of StartConsumeMessages.
func (mr *MockUsecaseMockRecorder) StartConsumeMessages(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConsumeMessages", reflect.TypeOf((*MockUsecase)(nil).StartConsumeMessages), ctx)
}
