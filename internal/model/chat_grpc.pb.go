// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatsClient is the client API for Chats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatsClient interface {
	GetChatById(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*Chat, error)
	EditChat(ctx context.Context, in *EditChatModel, opts ...grpc.CallOption) (*Chat, error)
	CreateChat(ctx context.Context, in *CreateChatArguments, opts ...grpc.CallOption) (*Chat, error)
	DeleteChatById(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckExistUserInChat(ctx context.Context, in *ExistChatArguments, opts ...grpc.CallOption) (*empty.Empty, error)
	GetListUserChats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ChatInListUser, error)
}

type chatsClient struct {
	cc grpc.ClientConnInterface
}

func NewChatsClient(cc grpc.ClientConnInterface) ChatsClient {
	return &chatsClient{cc}
}

func (c *chatsClient) GetChatById(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/chat.Chats/GetChatById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) EditChat(ctx context.Context, in *EditChatModel, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/chat.Chats/EditChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) CreateChat(ctx context.Context, in *CreateChatArguments, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/chat.Chats/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) DeleteChatById(ctx context.Context, in *ChatID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat.Chats/DeleteChatById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) CheckExistUserInChat(ctx context.Context, in *ExistChatArguments, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat.Chats/CheckExistUserInChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatsClient) GetListUserChats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ChatInListUser, error) {
	out := new(ChatInListUser)
	err := c.cc.Invoke(ctx, "/chat.Chats/GetListUserChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatsServer is the server API for Chats service.
// All implementations must embed UnimplementedChatsServer
// for forward compatibility
type ChatsServer interface {
	GetChatById(context.Context, *ChatID) (*Chat, error)
	EditChat(context.Context, *EditChatModel) (*Chat, error)
	CreateChat(context.Context, *CreateChatArguments) (*Chat, error)
	DeleteChatById(context.Context, *ChatID) (*empty.Empty, error)
	CheckExistUserInChat(context.Context, *ExistChatArguments) (*empty.Empty, error)
	GetListUserChats(context.Context, *UserID) (*ChatInListUser, error)
	mustEmbedUnimplementedChatsServer()
}

// UnimplementedChatsServer must be embedded to have forward compatible implementations.
type UnimplementedChatsServer struct {
}

func (UnimplementedChatsServer) GetChatById(context.Context, *ChatID) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatById not implemented")
}
func (UnimplementedChatsServer) EditChat(context.Context, *EditChatModel) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChat not implemented")
}
func (UnimplementedChatsServer) CreateChat(context.Context, *CreateChatArguments) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatsServer) DeleteChatById(context.Context, *ChatID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatById not implemented")
}
func (UnimplementedChatsServer) CheckExistUserInChat(context.Context, *ExistChatArguments) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExistUserInChat not implemented")
}
func (UnimplementedChatsServer) GetListUserChats(context.Context, *UserID) (*ChatInListUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserChats not implemented")
}
func (UnimplementedChatsServer) mustEmbedUnimplementedChatsServer() {}

// UnsafeChatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatsServer will
// result in compilation errors.
type UnsafeChatsServer interface {
	mustEmbedUnimplementedChatsServer()
}

func RegisterChatsServer(s grpc.ServiceRegistrar, srv ChatsServer) {
	s.RegisterService(&Chats_ServiceDesc, srv)
}

func _Chats_GetChatById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetChatById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chats/GetChatById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetChatById(ctx, req.(*ChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_EditChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditChatModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).EditChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chats/EditChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).EditChat(ctx, req.(*EditChatModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chats/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).CreateChat(ctx, req.(*CreateChatArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_DeleteChatById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).DeleteChatById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chats/DeleteChatById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).DeleteChatById(ctx, req.(*ChatID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_CheckExistUserInChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistChatArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).CheckExistUserInChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chats/CheckExistUserInChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).CheckExistUserInChat(ctx, req.(*ExistChatArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chats_GetListUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatsServer).GetListUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Chats/GetListUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatsServer).GetListUserChats(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// Chats_ServiceDesc is the grpc.ServiceDesc for Chats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Chats",
	HandlerType: (*ChatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatById",
			Handler:    _Chats_GetChatById_Handler,
		},
		{
			MethodName: "EditChat",
			Handler:    _Chats_EditChat_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _Chats_CreateChat_Handler,
		},
		{
			MethodName: "DeleteChatById",
			Handler:    _Chats_DeleteChatById_Handler,
		},
		{
			MethodName: "CheckExistUserInChat",
			Handler:    _Chats_CheckExistUserInChat_Handler,
		},
		{
			MethodName: "GetListUserChats",
			Handler:    _Chats_GetListUserChats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/microservices/chat/protobuf/chat.proto",
}
