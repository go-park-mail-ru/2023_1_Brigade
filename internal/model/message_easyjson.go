// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4086215fDecodeProjectInternalModel(in *jlexer.Lexer, out *WebSocketMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "image_url":
			out.ImageUrl = string(in.String())
		case "action":
			out.Action = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "body":
			out.Body = string(in.String())
		case "author_id":
			out.AuthorID = uint64(in.Uint64())
		case "chat_id":
			out.ChatID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectInternalModel(out *jwriter.Writer, in WebSocketMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageUrl))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Action))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthorID))
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ChatID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebSocketMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebSocketMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebSocketMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebSocketMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectInternalModel(l, v)
}
func easyjson4086215fDecodeProjectInternalModel1(in *jlexer.Lexer, out *ProducerMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "image_url":
			out.ImageUrl = string(in.String())
		case "action":
			out.Action = uint64(in.Uint64())
		case "type":
			out.Type = uint64(in.Uint64())
		case "body":
			out.Body = string(in.String())
		case "author_id":
			out.AuthorId = uint64(in.Uint64())
		case "chat_id":
			out.ChatID = uint64(in.Uint64())
		case "receiver_id":
			out.ReceiverID = uint64(in.Uint64())
		case "created_at":
			out.CreatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectInternalModel1(out *jwriter.Writer, in ProducerMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageUrl))
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Action))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthorId))
	}
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ChatID))
	}
	{
		const prefix string = ",\"receiver_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ReceiverID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProducerMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProducerMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProducerMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProducerMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectInternalModel1(l, v)
}
func easyjson4086215fDecodeProjectInternalModel2(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "author_id":
			out.AuthorID = uint64(in.Uint64())
		case "chat_name":
			out.ChatName = string(in.String())
		case "chat_avatar":
			out.ChatAvatar = string(in.String())
		case "author_nickname":
			out.AuthorNickname = string(in.String())
		case "body":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectInternalModel2(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AuthorID))
	}
	{
		const prefix string = ",\"chat_name\":"
		out.RawString(prefix)
		out.String(string(in.ChatName))
	}
	{
		const prefix string = ",\"chat_avatar\":"
		out.RawString(prefix)
		out.String(string(in.ChatAvatar))
	}
	{
		const prefix string = ",\"author_nickname\":"
		out.RawString(prefix)
		out.String(string(in.AuthorNickname))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectInternalModel2(l, v)
}
func easyjson4086215fDecodeProjectInternalModel3(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "image_url":
			out.ImageUrl = string(in.String())
		case "type":
			out.Type = uint64(in.Uint64())
		case "body":
			out.Body = string(in.String())
		case "author_id":
			out.AuthorId = uint64(in.Uint64())
		case "id_chat":
			out.ChatId = uint64(in.Uint64())
		case "created_at":
			out.CreatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectInternalModel3(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Type))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AuthorId))
	}
	{
		const prefix string = ",\"id_chat\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ChatId))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectInternalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectInternalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectInternalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectInternalModel3(l, v)
}
func easyjson4086215fDecodeProjectInternalModel4(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.Url = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4086215fEncodeProjectInternalModel4(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4086215fEncodeProjectInternalModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4086215fEncodeProjectInternalModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4086215fDecodeProjectInternalModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4086215fDecodeProjectInternalModel4(l, v)
}
