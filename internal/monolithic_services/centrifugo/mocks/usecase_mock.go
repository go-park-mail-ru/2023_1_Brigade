// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_centrifugo is a generated GoMock package.
package mock_centrifugo

import (
	context "context"
	reflect "reflect"

	centrifuge "github.com/centrifugal/centrifuge-go"
	gomock "github.com/golang/mock/gomock"
)

// MockCentrifugo is a mock of Centrifugo interface.
type MockCentrifugo struct {
	ctrl     *gomock.Controller
	recorder *MockCentrifugoMockRecorder
}

// MockCentrifugoMockRecorder is the mock recorder for MockCentrifugo.
type MockCentrifugoMockRecorder struct {
	mock *MockCentrifugo
}

// NewMockCentrifugo creates a new mock instance.
func NewMockCentrifugo(ctrl *gomock.Controller) *MockCentrifugo {
	mock := &MockCentrifugo{ctrl: ctrl}
	mock.recorder = &MockCentrifugoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCentrifugo) EXPECT() *MockCentrifugoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCentrifugo) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCentrifugoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCentrifugo)(nil).Close))
}

// GetSubscription mocks base method.
func (m *MockCentrifugo) GetSubscription(channel string) (*centrifuge.Subscription, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", channel)
	ret0, _ := ret[0].(*centrifuge.Subscription)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockCentrifugoMockRecorder) GetSubscription(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockCentrifugo)(nil).GetSubscription), channel)
}

// OnPublication mocks base method.
func (m *MockCentrifugo) OnPublication(handler centrifuge.ServerPublicationHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnPublication", handler)
}

// OnPublication indicates an expected call of OnPublication.
func (mr *MockCentrifugoMockRecorder) OnPublication(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPublication", reflect.TypeOf((*MockCentrifugo)(nil).OnPublication), handler)
}

// Publish mocks base method.
func (m *MockCentrifugo) Publish(ctx context.Context, channel string, data []byte) (centrifuge.PublishResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, channel, data)
	ret0, _ := ret[0].(centrifuge.PublishResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockCentrifugoMockRecorder) Publish(ctx, channel, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockCentrifugo)(nil).Publish), ctx, channel, data)
}
