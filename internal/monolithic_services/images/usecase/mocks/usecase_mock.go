// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_images is a generated GoMock package.
package mock_images

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockUsecase) GetImage(ctx context.Context, bucketName, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, bucketName, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockUsecaseMockRecorder) GetImage(ctx, bucketName, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockUsecase)(nil).GetImage), ctx, bucketName, filename)
}

// UploadGeneratedImage mocks base method.
func (m *MockUsecase) UploadGeneratedImage(ctx context.Context, bucketName, filename, firstCharacterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadGeneratedImage", ctx, bucketName, filename, firstCharacterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadGeneratedImage indicates an expected call of UploadGeneratedImage.
func (mr *MockUsecaseMockRecorder) UploadGeneratedImage(ctx, bucketName, filename, firstCharacterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadGeneratedImage", reflect.TypeOf((*MockUsecase)(nil).UploadGeneratedImage), ctx, bucketName, filename, firstCharacterName)
}

// UploadImage mocks base method.
func (m *MockUsecase) UploadImage(ctx context.Context, file io.Reader, bucketName, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, file, bucketName, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockUsecaseMockRecorder) UploadImage(ctx, file, bucketName, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockUsecase)(nil).UploadImage), ctx, file, bucketName, filename)
}
