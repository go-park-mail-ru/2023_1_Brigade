// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: consumer_rpc.proto

package service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protobuf_generated "project/internal/model/generated"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumersClient is the client API for Consumers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumersClient interface {
	ConsumeMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protobuf_generated.Bytes, error)
	StartConsumeMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type consumersClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumersClient(cc grpc.ClientConnInterface) ConsumersClient {
	return &consumersClient{cc}
}

func (c *consumersClient) ConsumeMessage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*protobuf_generated.Bytes, error) {
	out := new(protobuf_generated.Bytes)
	err := c.cc.Invoke(ctx, "/protobuf.Consumers/ConsumeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumersClient) StartConsumeMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.Consumers/StartConsumeMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumersServer is the server API for Consumers service.
// All implementations should embed UnimplementedConsumersServer
// for forward compatibility
type ConsumersServer interface {
	ConsumeMessage(context.Context, *empty.Empty) (*protobuf_generated.Bytes, error)
	StartConsumeMessages(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedConsumersServer should be embedded to have forward compatible implementations.
type UnimplementedConsumersServer struct {
}

func (UnimplementedConsumersServer) ConsumeMessage(context.Context, *empty.Empty) (*protobuf_generated.Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeMessage not implemented")
}
func (UnimplementedConsumersServer) StartConsumeMessages(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConsumeMessages not implemented")
}

// UnsafeConsumersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumersServer will
// result in compilation errors.
type UnsafeConsumersServer interface {
	mustEmbedUnimplementedConsumersServer()
}

func RegisterConsumersServer(s grpc.ServiceRegistrar, srv ConsumersServer) {
	s.RegisterService(&Consumers_ServiceDesc, srv)
}

func _Consumers_ConsumeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServer).ConsumeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Consumers/ConsumeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServer).ConsumeMessage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumers_StartConsumeMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumersServer).StartConsumeMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Consumers/StartConsumeMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumersServer).StartConsumeMessages(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumers_ServiceDesc is the grpc.ServiceDesc for Consumers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Consumers",
	HandlerType: (*ConsumersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsumeMessage",
			Handler:    _Consumers_ConsumeMessage_Handler,
		},
		{
			MethodName: "StartConsumeMessages",
			Handler:    _Consumers_StartConsumeMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consumer_rpc.proto",
}
