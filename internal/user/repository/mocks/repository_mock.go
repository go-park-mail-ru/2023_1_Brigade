// Code generated by MockGen. DO NOT EDIT.
// Source: authservice.go

// Package mockAuthService is a generated GoMock package.
package mocks

import (
	"github.com/labstack/echo/v4"
	"project/internal/model"
	reflect "reflect"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockAuthService creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockRepository) GetUserById(ctx echo.Context, userID uint64) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) GetUserById(ctx echo.Context, userID uint64) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockRepository)(nil).GetUserById), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(ctx echo.Context, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) GetUserByEmail(ctx echo.Context, email string) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByEmail), ctx, email)
}

// DeleteUserById mocks base method.
func (m *MockRepository) DeleteUserById(ctx echo.Context, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) DeleteUserById(ctx echo.Context, userID uint64) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockRepository)(nil).DeleteUserById), ctx, userID)
}

// AddUserInContact mocks base method.
func (m *MockRepository) AddUserInContact(ctx echo.Context, contact model.UserContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserInContact", ctx, contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserInContact indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) AddUserInContact(ctx echo.Context, contact model.UserContact) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInContact", reflect.TypeOf((*MockRepository)(nil).AddUserInContact), ctx, contact)
}

// UpdateUserById mocks base method.
func (m *MockRepository) UpdateUserById(ctx echo.Context, user model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserById", ctx, user)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserById indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) UpdateUserById(ctx echo.Context, user model.User) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserById", reflect.TypeOf((*MockRepository)(nil).UpdateUserById), ctx, user)
}

// GetUserContacts mocks base method.
func (m *MockRepository) GetUserContacts(ctx echo.Context, userID uint64) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserContacts", ctx, userID)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContacts indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) GetUserContacts(ctx echo.Context, userID uint64) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContacts", reflect.TypeOf((*MockRepository)(nil).GetUserContacts), ctx, userID)
}

// CheckUserIsContact mocks base method.
func (m *MockRepository) CheckUserIsContact(ctx echo.Context, contact model.UserContact) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserIsContact", ctx, contact)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserIsContact indicates an expected call of Auth.
func (mr *MockRepositoryMockRecorder) CheckUserIsContact(ctx echo.Context, contact model.UserContact) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserIsContact", reflect.TypeOf((*MockRepository)(nil).CheckUserIsContact), ctx, contact)
}
