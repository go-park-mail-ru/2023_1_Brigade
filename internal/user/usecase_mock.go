// Code generated by MockGen. DO NOT EDIT.
// Source: user/usecase.go

// Package mock_user is a generated GoMock package.
package user

//import (
//	model "example.com/m/model"
//	gomock "github.com/golang/mock/gomock"
//	reflect "reflect"
//)
//
//// MockUsecase is a mock of Usecase interface
//type MockUsecase struct {
//	ctrl     *gomock.Controller
//	recorder *MockUsecaseMockRecorder
//}
//
//// MockUsecaseMockRecorder is the mock recorder for MockUsecase
//type MockUsecaseMockRecorder struct {
//	mock *MockUsecase
//}
//
//// NewMockUsecase creates a new mock instance
//func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
//	mock := &MockUsecase{ctrl: ctrl}
//	mock.recorder = &MockUsecaseMockRecorder{mock}
//	return mock
//}
//
//// EXPECT returns an object that allows the caller to indicate expected use
//func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
//	return m.recorder
//}
//
//// GetUserById mocks base method
//func (m *MockUsecase) GetUserById(userID int) (model.User, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "GetUserById", userID)
//	ret0, _ := ret[0].(model.User)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// GetUserById indicates an expected call of GetUserById
//func (mr *MockUsecaseMockRecorder) GetUserById(userID interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUsecase)(nil).GetUserById), userID)
//}
//
//// ChangeUserById mocks base method
//func (m *MockUsecase) ChangeUserById(userID int, data []byte) (model.User, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ChangeUserById", userID, data)
//	ret0, _ := ret[0].(model.User)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// ChangeUserById indicates an expected call of ChangeUserById
//func (mr *MockUsecaseMockRecorder) ChangeUserById(userID, data interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserById", reflect.TypeOf((*MockUsecase)(nil).ChangeUserById), userID, data)
//}
//
//// DeleteUserById mocks base method
//func (m *MockUsecase) DeleteUserById(userID int) (model.User, error) {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "DeleteUserById", userID)
//	ret0, _ := ret[0].(model.User)
//	ret1, _ := ret[1].(error)
//	return ret0, ret1
//}
//
//// DeleteUserById indicates an expected call of DeleteUserById
//func (mr *MockUsecaseMockRecorder) DeleteUserById(userID interface{}) *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUsecase)(nil).DeleteUserById), userID)
//}
