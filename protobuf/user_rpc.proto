syntax = "proto3";

//option go_package = "./;protobuf";

//package chat;

//option go_package = ".";

option go_package = ".;generated";

package protobuf;


//    protoc -I=protobuf --go_out=../chat/delivery/grpc/client --go-grpc_out=../chat/delivery/grpc/client --grpc-gateway_out=logtostderr=true,paths=source_relative,grpc_api_configuration=protobuf/chat.yaml:../chat/delivery/grpc/client --go_opt=module=github.com/yourusername/yourproject/chat/delivery/grpc/client --go-grpc_opt=module=github.com/yourusername/yourproject/chat/delivery/grpc/client,require=protobuf/protobuf.proto,Mproto/chat.proto=protobuf:. protobuf/chat.proto
//    protoc -I=protobuf --go_out=../chat/delivery/grpc/client --go-grpc_out=../chat/delivery/grpc/client --grpc-gateway_out=logtostderr=true,paths=source_relative,grpc_api_configuration=protobuf/chat.yaml:../chat/delivery/grpc/client --go_opt=module=github.com/yourusername/yourproject/chat/delivery/grpc/client --go-grpc_opt=module=github.com/yourusername/yourproject/chat/delivery/grpc/client,require=protobuf/protobuf.proto,Mproto/chat.proto=protobuf:. protobuf/chat.proto
import "google/protobuf/empty.proto";
import "protobuf/user.proto";

service Users {
  rpc DeleteUserById(UserID) returns(google.protobuf.Empty) {}
  rpc CheckExistUserById(UserID) returns(google.protobuf.Empty) {}
  rpc GetUserById(UserID) returns(User) {}
  rpc AddUserContact(AddUserContactArguments) returns(Contacts) {}
  rpc GetUserContacts(UserID) returns(Contacts) {}
  rpc PutUserById(PutUserArguments) returns(User) {}
  rpc GetAllUsersExceptCurrentUser(UserID) returns(Contacts) {}
}
